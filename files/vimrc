" vimrc - vim configuration

set nocompatible

execute pathogen#infect()
execute pathogen#helptags()

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax')
  syntax on
endif

" Default Options
set nobackup
set noerrorbells
set nojoinspaces
set noswapfile
set nowrap

set autowrite
set backspace=indent,eol,start
set hidden
set ignorecase
set laststatus=2
set lazyredraw
set modeline
set number
set ruler
set showmatch
set showmode
set smartcase
set splitright
set switchbuf=usetab
set timeoutlen=2000
set ttimeoutlen=0
set ttyfast

set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest:list

set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set incsearch                                                " search as you type
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫

" Feature Options
if has('clipboard')
  set clipboard=unnamed
  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

if has('diff')
  set diffopt=filler,context:3
endif

if has('extra_search')
  set nohlsearch
endif

if has('folding')
  set nofoldenable
endif

if has('mksession')
  set sessionoptions-=buffers
endif

if has('mouse')
  set mouse=a
  if has('mouse_sgr')
    set ttymouse=sgr
  endif

  if exists('$TMUX')  " Support resizing in tmux
    set ttymouse=xterm2
  endif
endif

if has('syntax')
  set cursorline
endif

if has('windows')
  set showtabline=2
  set winminheight=0
endif

" Default Indentation
set autoindent
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=8
set textwidth=72

" Other
set cursorline
set cursorcolumn
" Key Mappings

let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

nnoremap <leader>] :TagbarToggle<CR>

noremap <C-J> <PageDown>
noremap <C-K> <PageUp>

noremap <silent> <Leader>n :set hlsearch!<CR>
noremap <silent> <Leader>p :set paste!<CR>
noremap <silent> <Leader>r :set relativenumber!<CR>
noremap <silent> <Leader>s :set spell!<CR>
noremap <silent> <leader>x :Hexmode <CR>

noremap <silent> [b :bprevious<CR>
noremap <silent> ]b :bnext<CR>

noremap <silent> [t :tabprev<CR>
noremap <silent> ]t :tabnext<CR>

nnoremap <leader><space> :WhitespaceStrip<CR>
nnoremap <leader>g :GitGutterToggle<CR>

" Remote terminals don't cope particularly well with arrow keys in
" insert mode. The key mappings proposed in Solution 15 works around the
" issue without having to modify the 'term' option;
" see: http://vim.wikia.com/wiki/Fix_arrow_keys_that_display_A_B_C_D_on_remote_shell.
inoremap <Esc>oA <Esc>ki
inoremap <Esc>oB <Esc>ji
inoremap <Esc>oC <Esc>li
inoremap <Esc>oD <Esc>hi

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set spell

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

let g:whitespace_strip_enabled = 1

let g:whitespace_ignore_tabs = [
      \ 'git',
      \ 'gitcommit',
      \ 'gitconfig',
      \ 'gitrebase',
      \ 'gitsendemail',
      \ ]

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Color Scheme
colorscheme wtf

" Stolen from https://github.com/Shougo/neocomplete.vim
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Source local configuration:
silent! source ~/.vimrc.local
