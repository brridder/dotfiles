// Copyright 2019 Verily Life Sciences LLC. All Rights Reserved.
// Copyrighted material is proprietary and confidential.

syntax = "proto2";

package fugu;

message EmptyMessage {}

message RequestInfo {
  enum InfoType { DEVICE = 1; }

  optional InfoType type = 1;
}

message Version {
  optional int32 major = 1;
  optional int32 minor = 2;
  optional int32 patch = 3;
}

message AppError {
  optional int32 error_code = 1;
  optional int32 line_number = 2;
  optional bytes file = 3;
}

message HardFault {
  optional int32 pc = 1;
  optional int32 lr = 2;
  optional int32 sp = 3;
  optional int32 psr = 4;
  optional int32 cfsr = 5;
  optional int32 hfsr = 6;
  optional int32 mmfar_bfar = 7;
}

message CrashLog {
  enum BootReason {
    UNKNOWN = 1;
    RESET_PIN = 2;
    WATCHDOG = 3;
    SOFT_RESET = 4;
    CPU_LOCKUP = 5;
  }

  optional int32 timestamp = 1;
  optional BootReason boot_reason = 2;
  oneof crash_info {
    AppError app_error = 3;
    HardFault hard_fault = 4;
  }
}

message DeviceInfo {
  optional bytes sensor_serial_number = 1;
  optional bytes ble_mac = 2;
  optional Version version = 3;
}

message SetSerialNumber {
  enum SerialNumberType { SENSOR = 1; }
  optional bytes serial_number = 1;
  optional SerialNumberType type = 2;
}

message MotorRequest {
  enum MotorCommand {
    SEEK_HOME = 1;
    MOVE = 2;
    HALT = 3;
    GET_INFO = 4;
  }
  optional MotorCommand command = 1;
  optional int32 distance_um = 2;
  optional int32 max_velocity_um_per_second = 3;
}

message MotorResponse {
  enum MotorStatus {
    STOPPED = 1;
    STALLED = 2;
    FAULT = 3;
    MOVING = 4;
  }
  optional MotorStatus status = 1;
  optional int32 current_position_um = 2;
  optional int32 current_max_velocity_um_per_second = 3;
}

message LEDRequest {
  enum LEDCommand {
    POWER_ON = 1;
    POWER_OFF = 2;
  }

  optional LEDCommand command = 1;
  optional int32 color = 2;  // Format is 0x00RRGGBB
  optional int32 period_ms = 3;
  optional int32 ramp_ms = 4;
}

message MeasurementRequest {
  enum MeasurementCommand {
    STOP = 1;
    START = 2;
    START_STREAMING = 3;
    CALIBRATE = 4;  // Also tares
    TACTILE_START = 5;
    TACTILE_STOP = 6;
  }

  optional MeasurementCommand command = 1;
}

message Calibration {
  optional int32 temp = 1;
}

message MeasurementResponse {
  optional int32 temp = 1;
}

message AccelerometerData {
  repeated int32 x = 1 [packed = true];
  repeated int32 y = 2 [packed = true];
  repeated int32 z = 3 [packed = true];
}

message TemperatureData {
  optional int32 temperature = 1;
}

message PressureData {
  repeated int32 data = 1;
  repeated int32 raw_values = 2;
}

message SensorData {
  oneof data {
    AccelerometerData accelerometer_data = 1;
    TemperatureData temperature_data = 2;
    PressureData pressure_data = 3;
  }
}

message Message {
  oneof payload {
    RequestInfo request_info = 1;
    DeviceInfo device_info = 2;
    SetSerialNumber set_serial_number = 3;
    MotorRequest motor_request = 4;
    MotorResponse motor_response = 5;
    LEDRequest led_request = 6;
    MeasurementRequest measurement_request = 7;
    SensorData sensor_data = 8;
  }
}
